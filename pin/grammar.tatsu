@@grammar::PIN

start
    =
    | statement
    | expression
    $
    ;

statement
    =
    | variable
    | expression
    ;

variable
    =
    'let'
    mutability:mutability_specifier
    id:identifier
    [type:type_specifier]
    '=' expr:expression END
    ;

expression
    =
    | if_expression
    | when_expression
    | function_expression
    | expression '+' term
    | expression '-' term
    | term
    ;

term
    =
    | term '*' factor
    | term '/' factor
    | factor
    ;

factor
    =
    | '(' expression ')'
    | atom
    ;

atom
    =
    | number
    | bool
    ;

#EXPRESSIONS
@@keyword :: if else when let mut
if_expression
    =
    'if' ~ expression block {'else' 'if' expression block} ['else' block]
    ;

when_expression
    =
    'when' ~ expression '{'
    { expression '->' when_element ',' }+
    'else' '->' when_element [',']
    '}'
    ;

when_element = ( expression | code ) ;

function_expression
    =
    #| parameters '->' code
    parameter '->' [type] block ~
    ;

#closure = '(' {parameter ','}+ ')' ;
parameter = '(' ','%{arg} ')';
arg = identifier type_specifier ['=' expression];

code = block | oneline ;
block = '{' @:{statement} '}' ;
oneline = expression END ;


#SPECIFIERS

#visibility_specifier = 'pub' ;
mutability_specifier = (@:'mut' | @:`const`) ;

type_specifier
    = ':' @:type
    ;

#TOKENS

type
    =
    | 'i8' | 'i16' | 'i32' | 'i64'
    | 'u8' | 'u16' | 'u32' | 'u64'
    | 'unit' | 'bool' | 'f32' | 'f64'
    ;

number = /\d+/ ;
bool = 'true' | 'false' ;
identifier = /[a-zA-Z가-힣_][a-zA-Z0-9가-힣_]*/ ;
END = /\n/ ;
NL = /\n+/ ;
